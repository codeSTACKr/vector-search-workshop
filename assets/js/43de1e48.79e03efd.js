"use strict";(self.webpackChunkvector_search_workshop=self.webpackChunkvector_search_workshop||[]).push([[499],{483:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>h});var r=s(5893),n=s(1151);const a={},o="\ud83d\udcd8 How Atlas Search Works",i={id:"full-text-search/how-search-works",title:"\ud83d\udcd8 How Atlas Search Works",description:"Atlas Search uses inverted indexes to support text search queries. An inverted index is a data structure that maps each unique term in a collection to the documents that contain that term. The index is sorted by term, with each term referencing the documents that contain it.",source:"@site/docs/4-full-text-search/4-how-search-works.mdx",sourceDirName:"4-full-text-search",slug:"/full-text-search/how-search-works",permalink:"/vector-search-workshop/docs/full-text-search/how-search-works",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/vector-search-workshop/blob/main/docs/4-full-text-search/4-how-search-works.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcd8 Why Atlas Search",permalink:"/vector-search-workshop/docs/full-text-search/why-atlas-search"},next:{title:"Vector Search",permalink:"/vector-search-workshop/docs/category/vector-search"}},c={},h=[{value:"Simple String Search",id:"simple-string-search",level:2},{value:"Full Text Search",id:"full-text-search",level:2},{value:"Index Creation",id:"index-creation",level:2}];function l(e){const t={h1:"h1",h2:"h2",img:"img",p:"p",...(0,n.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"-how-atlas-search-works",children:"\ud83d\udcd8 How Atlas Search Works"}),"\n",(0,r.jsx)(t.p,{children:"Atlas Search uses inverted indexes to support text search queries. An inverted index is a data structure that maps each unique term in a collection to the documents that contain that term. The index is sorted by term, with each term referencing the documents that contain it."}),"\n",(0,r.jsx)(t.h2,{id:"simple-string-search",children:"Simple String Search"}),"\n",(0,r.jsx)(t.p,{children:"When you do a simple query in your database using a LIKE operator, or a regular expression, the database has to scan every document in the collection to find the matching documents. This is a slow process, and it gets slower as the number of documents in the collection increases."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Simple String Search",src:s(7193).Z+"",width:"754",height:"156"})}),"\n",(0,r.jsx)(t.h2,{id:"full-text-search",children:"Full Text Search"}),"\n",(0,r.jsx)(t.p,{children:"Full-text search is meant to search large amounts of text. For example, a search engine will use a full-text search to look for keywords in all the web pages that it indexed. The key to this technique is indexing."}),"\n",(0,r.jsx)(t.p,{children:"Indexing can be done in different ways, such as batch indexing or incremental indexing. The index then acts as an extensive glossary for any matching documents. Various techniques can then be used to extract the data. Apache Lucene, the open sourced search library, uses an inversed index to find the matching items. In the case of our menu search, each word links to the matching menu item."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Full Text Search",src:s(3575).Z+"",width:"754",height:"298"})}),"\n",(0,r.jsx)(t.p,{children:"This technique is much faster than string searches for large amounts of data."}),"\n",(0,r.jsx)(t.h2,{id:"index-creation",children:"Index Creation"}),"\n",(0,r.jsx)(t.p,{children:"In order to prepare your data to be indexed, your data will go through a process called tokenization. Tokenization is the process of breaking a stream of text up into words, phrases, symbols, or other meaningful elements called tokens. This is done through a series of analyzers. Analyzers are the building blocks of the search engine. They are responsible for producing tokens out of the text. The tokens are then stored in the index."})]})}function d(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},7193:(e,t,s)=>{s.d(t,{Z:()=>r});const r=s.p+"assets/images/3-string-search-953a4b9a3361b0e76d96710a33f1962c.gif"},3575:(e,t,s)=>{s.d(t,{Z:()=>r});const r=s.p+"assets/images/4-full-text-search-db0022853c7bbb4ce17cbe4109c6747c.gif"},1151:(e,t,s)=>{s.d(t,{Z:()=>i,a:()=>o});var r=s(7294);const n={},a=r.createContext(n);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);