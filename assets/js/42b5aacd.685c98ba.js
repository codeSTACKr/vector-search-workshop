"use strict";(self.webpackChunkvector_search_workshop=self.webpackChunkvector_search_workshop||[]).push([[352],{9329:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var o=t(5893),s=t(1151);const i={},c="\ud83d\udc50 Create embeddings",r={id:"vector-search/create-embeddings",title:"\ud83d\udc50 Create embeddings",description:"We'll be using a fake dataset of markdown documents for a fake JavaScript library called FancyWidget.js. This set of documents can be found in the workshopassets folder of the demo repo.",source:"@site/docs/5-vector-search/4-create-embeddings.mdx",sourceDirName:"5-vector-search",slug:"/vector-search/create-embeddings",permalink:"/vector-search-workshop/docs/vector-search/create-embeddings",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/vector-search-workshop/blob/main/docs/5-vector-search/4-create-embeddings.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcd8 Implementing Vector Search",permalink:"/vector-search-workshop/docs/vector-search/implementing-vector-search"},next:{title:"\ud83d\udc50 Create Vector Search indexes",permalink:"/vector-search-workshop/docs/vector-search/create-index"}},a={},d=[{value:"\ud83c\udfc3\u200d\u2640\ufe0f Run the script",id:"\ufe0f-run-the-script",level:2},{value:"\ud83d\udc40 View the embeddings",id:"-view-the-embeddings",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"-create-embeddings",children:"\ud83d\udc50 Create embeddings"}),"\n",(0,o.jsxs)(n.p,{children:["We'll be using a fake dataset of markdown documents for a fake JavaScript library called FancyWidget.js. This set of documents can be found in the ",(0,o.jsx)(n.code,{children:"_workshop_assets"})," folder of the demo repo."]}),"\n",(0,o.jsxs)(n.p,{children:["If you look at the ",(0,o.jsx)(n.code,{children:"package.js"})," file, you'll see the available scripts. One is called ",(0,o.jsx)(n.code,{children:"embed"})," and runs a script called ",(0,o.jsx)(n.code,{children:"createEmbeddings.mjs"}),". Let's take a look at this file to see what it does."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { promises as fsp } from "fs";\nimport { RecursiveCharacterTextSplitter } from "langchain/text_splitter";\nimport { MongoDBAtlasVectorSearch } from "langchain/vectorstores/mongodb_atlas";\nimport { OpenAIEmbeddings } from "langchain/embeddings/openai";\nimport { MongoClient } from "mongodb";\nimport "dotenv/config";\n\nconst client = new MongoClient(process.env.MONGODB_ATLAS_URI || "");\nconst dbName = "docs";\nconst collectionName = "embeddings";\nconst collection = client.db(dbName).collection(collectionName);\n\nconst docs_dir = "_workshop_assets/fake_docs";\nconst fileNames = await fsp.readdir(docs_dir);\nconsole.log(fileNames);\nfor (const fileName of fileNames) {\n  const document = await fsp.readFile(`${docs_dir}/${fileName}`, "utf8");\n  console.log(`Vectorizing ${fileName}`);\n  \n  const splitter = RecursiveCharacterTextSplitter.fromLanguage("markdown", {\n    chunkSize: 500,\n    chunkOverlap: 50,\n  });\n  const output = await splitter.createDocuments([document]);\n  \n  await MongoDBAtlasVectorSearch.fromDocuments(\n    output,\n    new OpenAIEmbeddings(),\n    {\n      collection,\n      indexName: "default",\n      textKey: "text",\n      embeddingKey: "embedding",\n    }\n  );\n}\n\nconsole.log("Done: Closing Connection");\nawait client.close();\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This script is using the ",(0,o.jsx)(n.code,{children:"langchain"})," library to create embeddings for each document in the ",(0,o.jsx)(n.code,{children:"_workshop_assets/fake_docs"})," folder. It's using the ",(0,o.jsx)(n.code,{children:"RecursiveCharacterTextSplitter"})," to split each document into chunks of 500 characters with a 50 character overlap. It's then using the ",(0,o.jsx)(n.code,{children:"OpenAIEmbeddings"})," class to create embeddings for each chunk. Finally, it's using the ",(0,o.jsx)(n.code,{children:"MongoDBAtlasVectorSearch"})," class to store the embeddings in a MongoDB Atlas cluster."]}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-run-the-script",children:"\ud83c\udfc3\u200d\u2640\ufe0f Run the script"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Be sure you have entered your OpenAI API key and MongoDB Atlas URI in the ",(0,o.jsx)(n.code,{children:".env"})," file."]})}),"\n",(0,o.jsx)(n.p,{children:"Run the script with the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm run embed\n"})}),"\n",(0,o.jsx)(n.p,{children:"You should see output like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"> node createEmbeddings.mjs\n\n[\n  'API_Reference.md',\n  'README.md',\n  'Quick_Start.md',\n  'Changelog.md',\n  'Contributing.md',\n  'Installation.md',\n  'Usage.md',\n  'LICENSE'\n]\nVectorizing API_Reference.md\nVectorizing README.md\nVectorizing Quick_Start.md\nVectorizing Changelog.md\nVectorizing Contributing.md\nVectorizing Installation.md\nVectorizing Usage.md\nVectorizing LICENSE\nDone: Closing Connection\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-view-the-embeddings",children:"\ud83d\udc40 View the embeddings"}),"\n",(0,o.jsx)(n.p,{children:"Now that we have created embeddings for each document, let's view them in the MongoDB Atlas UI."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Open the MongoDB Atlas UI and navigate to the cluster you created earlier."}),"\n",(0,o.jsx)(n.li,{children:'Click the "Browse Collections" button.'}),"\n",(0,o.jsx)(n.li,{children:'Click the "docs" database.'}),"\n",(0,o.jsx)(n.li,{children:'Click the "embeddings" collection.'}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["You should see a list of documents along with the created embeddings. Expand one of the ",(0,o.jsx)(n.code,{children:"embedding"})," fields to see the entire vector embedding array."]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>c});var o=t(7294);const s={},i=o.createContext(s);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);